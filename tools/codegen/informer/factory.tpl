// Code generated by github.com/everoute/graphc/tools/codegen, DO NOT EDIT.

package {{.Package}}

import (
	"reflect"
	"time"

	graphcclient "github.com/everoute/graphc/pkg/client"
	graphcinformer "github.com/everoute/graphc/pkg/informer"
	graphcschema "github.com/everoute/graphc/pkg/schema"
	"k8s.io/client-go/tools/cache"

	"{{.Project}}/{{.SchemaModule}}"
)

type SharedInformerFactory interface {
	Start(stopCh <-chan struct{})
	WaitForCacheSync(stopCh <-chan struct{}) map[reflect.Type]bool
	InformerFor(obj graphcschema.Object) cache.SharedIndexInformer
    {{range $index, $element := .Resources }}
    {{$element}}() cache.SharedIndexInformer{{end}}
}

type sharedInformerFactory struct {
	graphcinformer.SharedInformerFactory
}

func NewSharedInformerFactory(client *graphcclient.Client, defaultResync time.Duration) SharedInformerFactory {
	return &sharedInformerFactory{
		*graphcinformer.NewSharedInformerFactory(client, defaultResync),
	}
}
{{range $index, $element := .Resources }}
func (f *sharedInformerFactory) {{$element}}() cache.SharedIndexInformer {
	return f.InformerFor(&schema.{{$element}}{})
}
{{end}}